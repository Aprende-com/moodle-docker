#!/usr/bin/env bash

# Read and set environment variables.
if [ -f ~/moodle-docker/.env ]; then
    cd ~
    export $(cat ~/moodle-docker/.env | xargs | envsubst)
    export MOODLE_DOCKER_CLIENT_HOST_IP=$(grep nameserver /etc/resolv.conf | cut -d ' ' -f2)
    cd ~/moodle-docker
else
    echo "Cannot find .env file."
    exit 1
fi

action=$1

case $action in
    start)
        bin/moodle-docker-compose start
        echo "Use './moodle stop' to pause the docker containers or './moodle help' for more information."
        ./moodle help
        exit 0
        ;;
    stop)
        bin/moodle-docker-compose stop
        echo "Use './moodle start' to resume operation of docker containers or './moodle help' for more information."
        exit 0
        ;;
    down)
        bin/moodle-docker-compose stop
        bin/moodle-docker-compose down --remove-orphans
        docker network prune -f
        echo "Use './moodle up' to rebuild or './moodle help' for more information."
        exit 0
        ;;
    status)
        docker ps --filter name=moodle
        exit 0
        ;;
    logs)
        echo 'Note: Press CTRL-C to exit.'
        docker logs moodle-webserver-1 --follow
        ;;
    update)
        pushd $MOODLE_DOCKER_WWWROOT > /dev/null
        git pull
        git submodule update --remote
        popd > /dev/null
        echo "IMPORTANT: Be sure to login and go to Notifications to update the database."
        ./moodle start
        exit 0
        ;;
    up)
        if [ -d $MOODLE_DOCKER_WWWROOT ] && [ ! -z "$(docker volume ls -q --filter name=${COMPOSE_PROJECT_NAME})" ]; then
            # Starts Docker.
            bin/moodle-docker-compose up -d
            # Wait for DB to come up (important for oracle/mssql)
            bin/moodle-docker-wait-for-db
            # Starts Containers
            bin/moodle-docker-compose start
        else
            echo "There are no existing containers and volumes for project ${COMPOSE_PROJECT_NAME})."
            echo "You need to run ./moodle reset first."
        fi
        ;;
    reset)  # Reset docker build..
        git ls-remote "git@github.com:Aprende-com/moodle-docker-assets.git" CHECK_GIT_REMOTE_URL_REACHABILITY
        status=$?
        if [ $status -ne 0 ]; then
            echo "You need to first set up an SSH key in order to access Aprende-com's private repositories on GitHub."
            echo "Exiting (error $status)."
            exit $status
        fi

        shift

        # Reset Start time.
        SECONDS=0

        # Stop the containers.
        bin/moodle-docker-compose stop
        bin/moodle-docker-compose down --remove-orphans
        docker network prune -f

        # Delete all containers.
        list=$(docker ps -a -q --filter name=${COMPOSE_PROJECT_NAME})
        if [ ! -z "$list" ]; then
            echo "Deleting all containers..."
            docker rm -f $list
        fi

        # Delete all volumes.
        list=$(docker volume ls -q --filter name=${COMPOSE_PROJECT_NAME})
        if [ ! -z "$list" ]; then
            echo "Deleting all volumes..."
            docker volume rm $list
        fi

        echo "Starting build on $(date)"

        if [ -d "$MOODLE_DOCKER_WWWROOT" ]; then
            echo "Existing Moodle application directory detected."
            while true; do
                read -p "Do you want re-create it (slower and destructive) again? (y/n) " rebuild
                case $rebuild in
                    [Yy]* )
                        echo "Deleting the Moodle application directory..."
                        sudo rm -rf $MOODLE_DOCKER_WWWROOT
                        break;;
                    [Nn]* )
                        break;;
                    * )
                        echo "Please answer yes or no.";;
                esac
            done
        fi

        # Install the Moodle Applicaton.
        if [ ! -d "$MOODLE_DOCKER_WWWROOT" ]; then
            echo "Creating the Moodle application directory."
            echo "Please be patient, this will take a while..."
            if [ -z $2 ]; then
                REPO="Aprende-com/moodle-dev.git"
            else
                REPO="$2"
            fi
            mkdir $MOODLE_DOCKER_WWWROOT
            pushd $MOODLE_DOCKER_WWWROOT > /dev/null
            if [ ! -z "$3" ]; then
                # Get a specific branch.
                BRANCH="$3"
                git clone --branch $BRANCH git@github.com:$REPO .
            else
                # Get the default branch.
                BRANCH=""
                git clone git@github.com:$REPO .
            fi
            if [ -f .gitmodules ]; then
                git submodule update --init --recursive .
                if [ ! -z "$BRANCH" ]; then
                    submodules=$(git config --file .gitmodules --get-regexp path | awk '{ print $2 }')
                    for path in $arr; do
                        pushd $path > /dev/null
                        branchexists=$(git branch --list ${BRANCH})
                        if [ ! -z ${branchexists} ]; then
                            git checkout $3
                        fi
                        popd > /dev/null
                    done;
                fi
            fi
            popd > /dev/null

            # Add a Docker specific config file into Moodle.
            cp config.docker-template.php $MOODLE_DOCKER_WWWROOT/config.php

            # Install some additional development tools.
            git clone https://github.com/mudrd8mz/moodle-tool_pluginskel.git $MOODLE_DOCKER_WWWROOT/admin/tool/pluginskel
            # git clone https://github.com/moodlehq/moodle-local_codechecker.git $MOODLE_DOCKER_WWWROOT/local/codechecker
            git clone https://github.com/moodlehq/moodle-local_moodlecheck $MOODLE_DOCKER_WWWROOT/local/moodlecheck
            git clone https://github.com/davidscotson/moodle-tool_themetester.git $MOODLE_DOCKER_WWWROOT/tool/themetester
            git clone https://github.com/gjb2048/moodle-block_theme_selector.git $MOODLE_DOCKER_WWWROOT/blocks/theme_selector
            git clone https://github.com/grabs/moodle-local_adminer.git $MOODLE_DOCKER_WWWROOT/local/adminer
        fi

        # Starts docker
        bin/moodle-docker-compose up -d
        # Wait for DB to come up (important for oracle/mssql)
        bin/moodle-docker-wait-for-db
        # Starts Containers
        bin/moodle-docker-compose start

        # Continue installation of database and moodledata. Moodle application files is the only persistent content.

        # ===========================
        echo "=== Creating the database."
        # ===========================
        docker exec -ti moodle-db-1 mysql -e "DROP DATABASE IF EXISTS moodle"
        docker exec -ti moodle-db-1 mysql -e "CREATE DATABASE moodle DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci"

        if [ "$REPO" = "Aprende-com/moodle-dev.git" ]; then
            # ===========================
            echo "=== Initializing Moodle."
            # ===========================
            # Preparing Aprende private assets.
            if [ -d $MOODLE_DOCKER_WWWROOT/assets ]; then
                rm -rf $MOODLE_DOCKER_WWWROOT/assets
            fi
            git clone git@github.com:Aprende-com/moodle-docker-assets.git $MOODLE_DOCKER_WWWROOT/assets
            docker exec -ti moodle-webserver-1 mv /var/www/html/assets /tmp/
            docker exec -ti moodle-webserver-1 bash -c /tmp/assets/mdl-init.sh
            echo "================================= DONE ================================="
        else
            docker exec -ti moodle-webserver-1 php admin/cli/install_database.php --lang="en" --adminuser="admin" --adminpass="moodle"  --adminemail="admin@localhost.local" --agree-license --fullname="Aprende 3.11 Local DEV" --shortname="Local DEV"
            echo "Your Moodle site is ready for manual initialization."
        fi
        ./moodle help
        awk -v t=$SECONDS 'BEGIN{t=int(t*1000); printf "Elapsed Time (HH:MM:SS): %d:%02d:%02d\n", t/3600000, t/60000%60, t/1000%60}'
        ;;
    help)
        echo "Some useful commands:"
        echo "- ./moodle                   Access the Bash command line on webserver as root."
        echo "- ./moodle help              Display this help."
        echo "- ./moodle db                Access the MySQL (MariaDB) command line as root user."
        echo "- ./moodle up                Starts current build. If none exist, will start new build. See URLs below."
        echo "- ./moodle down              Shutdown a container."
        echo "- ./moodle reset             Builds and starts websites. Will result in deletion of all data. See URLs below."
        echo "- ./moodle start             Start a container."
        echo "- ./moodle stop              Stop a container without loosing data."
        echo "- ./moodle status            List of running containers."
        echo "- ./moodle logs              View logs from the Moodle Webserver."
        echo "- ./moodle update            Update running containers with latest code changes."
        echo "- ./moodle [other command]   Run the command on the webserver."
        echo ""
        echo "From inside the container:"
        echo "- moosh                      See https://moosh-online.com/ for details."
        echo "- composer"
        echo ""
        echo "Useful URLs:"
        echo "- http://localhost:8000      Access the Moodle LMS site."
        echo "- http://localhost:8025      Access the MailHog site."
        echo "- http://localhost:8100      Access the Moodle App."
        echo "- http://localhost:8900      Access phpMyAdmin."
        echo ""
        echo " Port Description:"
        echo " - localhost:1025            SMTP server for MailHog."
        echo " - localhost:9004            Xdebug."
        echo " - localhost:3307            MariaDB server."
        echo ""
        echo "Site Credentials:            Database Credentials:"
        echo "- admin / moodle             - DB Host: db"
        echo "- manager / moodle           - DB Name: moodle"
        echo "- teacher / moodle           - DB User: moodle"
        echo "- student / moodle           - DB Password: m@0dleing"
        echo ""
        echo "Be sure to login to Moodle to complete the upgrade."
        ;;
    *)
        if [[ $# -eq 0 ]]; then
            docker exec -ti moodle-webserver-1 bash
        elif [ "$1" = "db" ]; then
            shift
            docker exec -ti moodle-db-1 mysql $@
        else
            docker exec -ti moodle-webserver-1 bash -c $@
        fi
        ;;
esac
